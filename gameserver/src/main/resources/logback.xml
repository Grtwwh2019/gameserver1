<?xml version="1.0" encoding="UTF-8"?>
<!--scan:设置为true时，配置文件如果发生改变，将会被重新加载-->
<!--scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。当前配置为30秒检测一次配置文件是否有修改-->
<!--debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<!--packagingData="true"可以在日志后看到依赖jar包名和版本，很费性能-->
<configuration debug="false" scan="true" scanPeriod="30 seconds" packagingData="true">

    <!--如果我们想禁用任何状态消息，我们可以使用NopStatusListener类。-->
    <statusListener class="ch.qos.logback.core.status.NopStatusListener"/>

    <property name="xxxx" value="xxxx"/>

    <!--logger上下文名称-->
    <contextName>gameserver3</contextName>

    <!--负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名-->
    <!--ConsoleAppender 把日志输出到控制台-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--<encoder>标签：对日志进行格式化。-->
        <encoder>
            <Pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</Pattern>
        </encoder>
    </appender>

<!--    &lt;!&ndash;RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件&ndash;&gt;-->
<!--    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;rollingPolicy：当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类&ndash;&gt;-->
<!--        &lt;!&ndash;滚动策略类在ch.qos.logback.core.rolling包中&ndash;&gt;-->
<!--        &lt;!&ndash;TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动&ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash;fileNamePattern：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。&ndash;&gt;-->
<!--            <fileNamePattern>./gameserver2/logs/logFile.%d{yyyy-MM-dd}.log</fileNamePattern>-->
<!--            &lt;!&ndash;maxHistory:可选节点，控制保留的归档文件的最大数量。&ndash;&gt;-->
<!--            <maxHistory>30</maxHistory>-->
<!--        </rollingPolicy>-->
<!--        <encoder>-->
<!--            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</Pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash;RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件&ndash;&gt;-->
<!--    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;rollingPolicy：当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类&ndash;&gt;-->
<!--        &lt;!&ndash;滚动策略类在ch.qos.logback.core.rolling包中&ndash;&gt;-->
<!--        &lt;!&ndash;TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动&ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash;fileNamePattern：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。&ndash;&gt;-->
<!--            <fileNamePattern>./gameserver2/logs/errorFile.%d{yyyy-MM-dd}.log</fileNamePattern>-->
<!--            &lt;!&ndash;maxHistory:可选节点，控制保留的归档文件的最大数量。&ndash;&gt;-->
<!--            <maxHistory>30</maxHistory>-->
<!--        </rollingPolicy>-->
<!--        <encoder>-->
<!--            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</Pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash;RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件&ndash;&gt;-->
<!--    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash;rollingPolicy：当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类&ndash;&gt;-->
<!--        &lt;!&ndash;滚动策略类在ch.qos.logback.core.rolling包中&ndash;&gt;-->
<!--        &lt;!&ndash;TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动&ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash;fileNamePattern：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。&ndash;&gt;-->
<!--            <fileNamePattern>./gameserver2/logs/error.%d{yyyy-MM-dd}.log</fileNamePattern>-->
<!--            &lt;!&ndash;maxHistory:可选节点，控制保留的归档文件的最大数量。&ndash;&gt;-->
<!--            <maxHistory>30</maxHistory>-->
<!--        </rollingPolicy>-->
<!--        <encoder>-->
<!--            <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</Pattern>-->
<!--        </encoder>-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>ERROR</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMissmatch>DENY</onMissmatch>-->
<!--        </filter>-->
<!--    </appender>-->

    <!--logger:用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>。-->
    <!--name属性:用来指定受此logger约束的某一个包或者具体的某一个类。-->
    <!--level属性:表示打印日志的级别 info=>debug=>warn=>error -->
<!--    <logger name="com.grtwwh.gameserver" level="TRACE">-->
<!--        <appender-ref ref="xxxx"/>-->
<!--    </logger>-->

    <!--不设置<appender-ref>说明此logger本身不打印任何信息-->
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.hibernate" level="WARN" additivity = "false"/>
    <logger name="io.netty" level="WARN" additivity = "false"/>

    <!--root:它也是<logger>元素，但是它是根logger,是所有<logger>的上级。level默认是debug-->
    <root level="info" >
        <appender-ref ref="STDOUT"/>
    </root>

</configuration>